// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Entidades principales del sistema ---

model Company {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(255)
  employees Employee[]
  positions Position[]
}

model Employee {
  id         Int      @id @default(autoincrement())
  companyId  Int
  name       String   @db.VarChar(100)
  email      String   @unique @db.VarChar(255)
  role       String   @db.VarChar(50)
  isActive   Boolean  @default(true)
  company    Company  @relation(fields: [companyId], references: [id])
  interviews Interview[]

  @@index([companyId])
}

model Position {
  id                  Int             @id @default(autoincrement())
  companyId           Int
  interviewFlowId     Int
  title               String          @db.VarChar(100)
  description         String?
  status              String          @db.VarChar(50)
  isVisible           Boolean         @default(true)
  location            String?         @db.VarChar(100)
  jobDescription      String?
  requirements        String?
  responsibilities    String?
  salaryMin           Float?
  salaryMax           Float?
  employmentType      String?         @db.VarChar(50)
  benefits            String?
  companyDescription  String?
  applicationDeadline DateTime?
  contactInfo         String?         @db.VarChar(255)
  company             Company         @relation(fields: [companyId], references: [id])
  interviewFlow       InterviewFlow   @relation(fields: [interviewFlowId], references: [id])
  applications        Application[]

  @@index([companyId])
  @@index([interviewFlowId])
}

model InterviewFlow {
  id            Int             @id @default(autoincrement())
  description   String          @db.VarChar(255)
  positions     Position[]
  interviewSteps InterviewStep[]
}

model InterviewStep {
  id              Int            @id @default(autoincrement())
  interviewFlowId Int
  interviewTypeId Int
  name            String         @db.VarChar(100)
  orderIndex      Int
  interviewFlow   InterviewFlow  @relation(fields: [interviewFlowId], references: [id])
  interviewType   InterviewType  @relation(fields: [interviewTypeId], references: [id])
  interviews      Interview[]

  @@index([interviewFlowId])
  @@index([interviewTypeId])
}

model InterviewType {
  id           Int             @id @default(autoincrement())
  name         String          @db.VarChar(100)
  description  String?
  interviewSteps InterviewStep[]
}

model Candidate {
  id              Int               @id @default(autoincrement())
  firstName       String            @db.VarChar(100)
  lastName        String            @db.VarChar(100)
  email           String            @unique @db.VarChar(255)
  phone           String?           @db.VarChar(15)
  address         String?           @db.VarChar(100)
  educations      Education[]
  workExperiences WorkExperience[]
  resumes         Resume[]
  applications    Application[]

  @@index([email])
}

model Education {
  id           Int       @id @default(autoincrement())
  candidateId  Int
  institution  String    @db.VarChar(100)
  title        String    @db.VarChar(250)
  startDate    DateTime
  endDate      DateTime?
  candidate    Candidate @relation(fields: [candidateId], references: [id])

  @@index([candidateId])
  // Restricción lógica: (candidateId, institution, title, startDate) debe ser única (validar en app)
}

model WorkExperience {
  id           Int       @id @default(autoincrement())
  candidateId  Int
  company      String    @db.VarChar(100)
  position     String    @db.VarChar(100)
  description  String?   @db.VarChar(200)
  startDate    DateTime
  endDate      DateTime?
  candidate    Candidate @relation(fields: [candidateId], references: [id])

  @@index([candidateId])
  // Restricción lógica: (candidateId, company, position, startDate) debe ser única (validar en app)
}

model Resume {
  id           Int       @id @default(autoincrement())
  candidateId  Int
  filePath     String    @db.VarChar(500)
  fileType     String    @db.VarChar(50)
  uploadDate   DateTime  @default(now())
  candidate    Candidate @relation(fields: [candidateId], references: [id])

  @@index([candidateId])
}

model Application {
  id             Int         @id @default(autoincrement())
  positionId     Int
  candidateId    Int
  applicationDate DateTime
  status         String      @db.VarChar(50)
  notes          String?
  position       Position    @relation(fields: [positionId], references: [id])
  candidate      Candidate   @relation(fields: [candidateId], references: [id])
  interviews     Interview[]

  @@unique([positionId, candidateId])
  @@index([positionId])
  @@index([candidateId])
}

model Interview {
  id               Int            @id @default(autoincrement())
  applicationId    Int
  interviewStepId  Int
  employeeId       Int
  interviewDate    DateTime
  result           String?        @db.VarChar(50)
  score            Int?
  notes            String?
  application      Application    @relation(fields: [applicationId], references: [id])
  interviewStep    InterviewStep  @relation(fields: [interviewStepId], references: [id])
  employee         Employee       @relation(fields: [employeeId], references: [id])

  @@index([applicationId])
  @@index([interviewStepId])
  @@index([employeeId])
}